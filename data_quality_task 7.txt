{
  "Comment": "A description of my state machine",
  "StartAt": "Step with first Redshift test",
  "States": {
    "Step with first Redshift test": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-central-1:260586643565:function:Daviti_Matiashvili_FirstTest:$LATEST",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultPath": "$.FirstTest",
      "Next": "Update data in the Redshift"
    },
    "Update data in the Redshift": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-central-1:260586643565:function:Daviti_Matiashvili_UpdateCode:$LATEST",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultPath": "$.UpdateResult",
      "Next": "Step with second Redshift test"
    },
    "Step with second Redshift test": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:eu-central-1:260586643565:function:Daviti_Matiashvili_SecondTest:$LATEST",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultPath": "$.SecondTest",
      "Next": "Check both tests"
    },
    "Check both tests": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.FirstTest.Payload.test_passed",
              "BooleanEquals": true
            },
            {
              "Variable": "$.SecondTest.Payload.test_passed_after_update",
              "BooleanEquals": true
            }
          ],
          "Next": "Success"
        }
      ],
      "Default": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}